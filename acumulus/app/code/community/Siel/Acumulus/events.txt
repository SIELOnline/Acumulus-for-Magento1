Acumulus module events
=======================

Warning
=======
The events are experimental. Depending on feedback from actual usage, details
may change in future versions!


Introduction
============
This file documents the events that the Acumulus module defines. Currently, 3
events are defined:
- acumulus_invoice_created
- acumulus_invoice_completed
- acumulus_invoice_sent

The event acumulus_invoice_created is triggered when the invoice has been
created with raw data from the webshop order or credit memo, but  has yet to be
completed and refined. Use this event when you want to do some completion
yourself. This should be rare and most of the times the
acumulus_invoice_completed event should be preferred.

The event acumulus_invoice_completed is triggered when the invoice has been
completed. Some defaults have been added; VAT rates have been corrected for
rounding errors; and the 'vat type' has been determined.

Typical usages for the latter event allow to implement business logic specific
to your business, think of:
- Template, account number, or cost center selection based on order specifics.
- Adding descriptive info to the invoice or invoice lines based on custom order
  meta data.
- Correcting payment info based on payment modules not supported by this module.

The event acumulus_invoice_sent is triggered when the invoice has been sent to
Acumulus. This allows to perform some actions depending on the result. Note that
this event is called independent of the result, so on success as well as
failure.

Typical usages for this event allow to use the invoice number assigned by
Acumulus in your webshop or to link your order to Acumulus info, although
this is also already done by this module itself.


acumulus_invoice_created
========================

Usage
-----
When the "acumulus_invoice_created" event is called, it is passed 3 arguments:
- invoice:
  [Note: To allow an observer to change the invoice it is packed in a
   transportObject, see the example below to see how to get and change the
   invoice.]
  A keyed array containing the invoice that will be sent to Acumulus. The array
  structure is similar to the XML structure as defined on
  https://apidoc.sielsystems.nl/content/invoice-add, though at this stage, only
  the customer key will be present at the highest level. The line tag is
  represented as a numeric array of lines, even if if there is only 1 line.

  Some keys will be missing, if they are still missing after this event has
  been applied, they will be filled in (not overwritten) by the Completor before
  the actual sending takes place:
  - ['customer']['locationcode']
  - ['customer']['overwriteifexists']
  - ['customer']['type']
  - ['customer']['invoice']['concept']
  - ['customer']['invoice']['accountnumber']
  - ['customer']['invoice']['costcenter']
  - ['customer']['invoice']['template]
  - ['customer']['invoice']['vattype]

  The following keys may be filled with a null value, if the 'unitprice' of that
  'line' = 0. These null values will be replaced by the module by the most
  occurring vat rate before the actual sending takes place:
  - ['customer']['invoice']['line']['vatrate']
- source: The Acumulus \Siel\Acumulus\Invoice\Source object that wraps the base
  Order or CreditNote of the invoice to be sent.
- localResult: A \Siel\Acumulus\Invoice\Result object that at this stage can
  only contain local warnings (and errors).


acumulus_invoice_completed
==========================

Usage
-----
When the "acumulus_invoice_completed" event is called, it is passed 3 arguments:
- invoice:
  [Note: To allow an observer to change the invoice it is packed in a
   transportObject, see the example below to see how to get and change the
   invoice.]
  A keyed array containing the invoice that will be sent to Acumulus. The array
  structure is similar to the XML structure as defined on
  https://apidoc.sielsystems.nl/content/invoice-add, though at this stage, only
  the customer key will be present at the highest level. The line tag is
  represented as a numeric array of lines, even if if there is only 1 line.
- source: The Acumulus \Siel\Acumulus\Invoice\Source object that wraps the base
  Order or CreditNote of the invoice to be sent.
- localResult: A \Siel\Acumulus\Invoice\Result object that at this stage can
  only contain local warnings (and errors).


Example
-------
config.xml:
<?xml version="1.0"?>
<config>
  <modules>
    <My_Module>
      <version>0.1-beta1</version>
    </My_Module>
  </modules>
  ...
  <global>
    ...
    <events>
      <acumulus_invoice_completed>
        <observers>
          <My_Module_acumulus_observer>
            <type>singleton</type>
            <class>module/acumulus_observer</class>
            <method>acumulusInvoiceCompleted</method>
          </My_Module_acumulus_observer>
        </observers>
      </acumulus_invoice_completed>
    </events>
    ...
  </global>
  ...
</config>

app\code\local\My\Module\Model\Acumulus\Observer.php:
use Siel\Acumulus\Invoice\Source;

class My_Module_Model_Acumulus_Observer extends Mage_Core_Model_Abstract {

  public function acumulusInvoiceCompleted(Varien_Event_Observer $observer) {
    $invoice = $observer->getTransportObject()->getInvoice();
    /** @var \Siel\Acumulus\Invoice\Source $source */
    $source = $observer->getSource();
    if ($source->getType() === Source::Order) {
      // Process order.
      $order = $source->getSource();
      $invoice['test'] = 'order test';
    }
    else { // $source->getType() === Source::CreditNote
      // Process credit memo.
      $creditmemo = $source->getSource();
      $invoice['test'] = 'creditmemo test';
    }

    // Make sure that the changes on the invoice are returned.
    $observer->getTransportObject()->setInvoice($invoice);
  }
}



acumulus_invoice_sent
=====================

Usage
-----
When the "acumulus_invoice_sent" event is called, it is passed 3 arguments:
- invoice:
  A keyed array containing the invoice that will be sent to Acumulus. The array
  structure is similar to the XML structure as defined on
  https://apidoc.sielsystems.nl/content/invoice-add, though at this stage, only
  the customer key will be present at the highest level. The line tag is
  represented as a numeric array of lines, even if if there is only 1 line.
- source: The Acumulus \Siel\Acumulus\Invoice\Source object that wraps the base
  Order or CreditNote of the invoice to be sent.
- result: A \Siel\Acumulus\Invoice\Result object that contains a.o. any warnings,
  errors and exceptions as well as the result as sent back by Acumulus, see
  https://apidoc.sielsystems.nl/content/invoice-add.

Example
-------
config.xml:
<?xml version="1.0"?>
<config>
  <modules>
    <My_Module>
      <version>0.1-beta1</version>
    </My_Module>
  </modules>
  ...
  <global>
    ...
    <events>
      <acumulus_invoice_sent>
        <observers>
          <My_Module_acumulus_observer>
            <type>singleton</type>
            <class>module/acumulus_observer</class>
            <method>acumulusInvoiceSent</method>
          </My_Module_acumulus_observer>
        </observers>
      </acumulus_invoice_sent>
    </events>
    ...
  </global>
  ...
</config>

app\code\local\My\Module\Model\Acumulus\Observer.php:
use Siel\Acumulus\Invoice\Source;

class My_Module_Model_Acumulus_Observer extends Mage_Core_Model_Abstract {

  public function acumulusInvoiceSent(Varien_Event_Observer $observer) {
    /** @var array $invoice */
    $invoice = $observer->getInvoice();
    /** @var \Siel\Acumulus\Invoice\Source $source */
    $source = $observer->getSource();
    /** @var array $result */
    $result = $observer->getResult();
    if (!empty($result['invoice']['invoicenumber']) {
      // Success.
      $acumulusInvoiceNumber = $result['invoice']['invoicenumber'];
      $acumulusEntryId = $result['invoice']['entryid'];
      $acumulusToken = $result['invoice']['token'];
    }
    else {
      // Failure.
    }
  }
}

External Resources
==================
- https://apidoc.sielsystems.nl/content/invoice-add.
- https://apidoc.sielsystems.nl/content/warning-error-and-status-response-section-most-api-calls
